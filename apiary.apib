+++FORMAT: 1A
HOST: https://polls.apiblueprint.org/

# GymAry V1

GymAry is an API to manage the activity of a gym.

### Errores

Cuando ocurre un código de error en cualquier petición se recibe un json con un campo
**message** que explica el error.

# Members Resource [/members]

Gestiona lo relacionado con los miembros dados de alta en el gimnasio (listar, crear,
eliminar y actualizar).

## List All Members [GET]
Muestra todos los miembros dados de alta, toda su información y las actividades a las
que están apuntados y sus horarios.
+ Response 200 (application/json)

        [
            {
                "id": 1,
                "nombre": "Juan",
                "apellidos": "Fernández García",
                "dni": "83762084Y",
                "dirección": "Calle Roca Nº2"
                "ciudad": "A Coruña",
                "codigo postal": 15007,
                "email": "juan.fernandez@gmail.com",
                "telefono": 686745367,
                "actividades":
                    [
                        {
                            "id": 1,
                            "nombre": "crossfit",
                            "horario":
                                [
                                    {
                                        "dia": "lunes",
                                        "hora": ["11:30"]
                                    },
                                    {
                                        "dia": "jueves",
                                        "hora": ["17:30"]
                                    }
                                ]
                        }
                    ]
            },
            {
                "id": 2,
                "nombre": "Rosa",
                "apellidos": "Rey Varela",
                "dni": "73645299J",
                "dirección": "Calle Azul Nº50"
                "ciudad": "A Coruña",
                "codigo postal": 15009,
                "email": "rosareyva@gmail.com",
                "telefono": 656438892,
                "actividades": []
            }
        ]
        
+ Response 500 (application/json)

        {
            "message": "Internal server error"
        }

## Get member [GET/members/{member_id}]
Muestra la información del miembro con el id dado.
+ Parameters
    + member_id: 2 (number) - ID of the member in the form of an integer

+ Response 200 (application/json)

        {
            "id": 2,
            "nombre": "Rosa",
            "apellidos": "Rey Varela",
            "dni": "73645299J",
            "dirección": "Calle Azul Nº50"
            "ciudad": "A Coruña",
            "codigo postal": 15009,
            "email": "rosareyva@gmail.com",
            "telefono": 656438892,
            "actividades": []
        }
        
+ Response 400 (application/json)

        {
            "message": "Invalid argument"
        }
        
+ Response 404 (application/json)

        {
            "message": "Resource not found"
        }
        
+ Response 500 (application/json)

        {
            "message": "Internal server error"
        }
        
## Delete member [DELETE/members/{member_id}]
Elimina (da de baja) el miembro con el id dado.
+ Parameters
    + member_id: 2 (number) - ID of the member in the form of an integer
    
+ Response 204

+ Response 500 (application/json)

        {
            "message": "Internal server error"
        }
        
## Sign up a new member [POST]
Da de alta una persona.
Se debe proporcionar:

- **Nombre:** Nombre del cliente.
- **Apellidos:** Apellidos del cliente.
- **DNI:** Documento de identidad del cliente.
- **Dirección:** Se divide en tres campos: dirección, ciudad y codigo postal.
- **Contacto:** Email y telefono.
- **Actividades** a las que el cliente desea apuntarse (puede ser ninguna).
- **Tarifa** mensual a pagar.

+ Request (application/json)

        {
            "nombre": "Marcos",
            "apellidos": "Taboada Fraga",
            "dni": "73649812I",
            "dirección": "Calle Cruz Nº109"
            "ciudad": "A Coruña",
            "codigo postal": 15008,
            "email": "marcos.tabo@gmail.com",
            "telefono": 677425109,
            "actividades":
                [
                    {
                        "id": 1,
                        "nombre": "crossfit",
                        "horario":
                            [
                                {
                                    "dia": "lunes",
                                    "hora": ["11:30"]
                                },
                                {
                                    "dia": "jueves",
                                    "hora": ["17:30"]
                                }
                            ]
                    },
                    {
                        "id": 2,
                        "nombre": "calistenia",
                        "horario":
                            [
                                {
                                    "dia": "miercoles",
                                    "hora": ["10:00"]
                                }
                            ]
                    }
                ],
            "tarifa": "30 euros/mes"
        }

+ Response 201 (application/json)

    + Headers

            Location: /members/3

    + Body

            {
                "id": 3,
                "nombre": "Marcos",
                "apellidos": "Taboada Fraga",
                "dni": "73649812I",
                "dirección": "Calle Cruz Nº109"
                "ciudad": "A Coruña",
                "codigo postal": 15008,
                "email": "marcos.tabo@gmail.com",
                "telefono": 677425109,
                "actividades":
                    [
                        {
                            "id": 1,
                            "nombre": "crossfit",
                            "horario":
                                [
                                    {
                                        "dia": "lunes",
                                        "hora": ["11:30"]
                                    },
                                    {
                                        "dia": "jueves",
                                        "hora": ["17:30"]
                                    }
                                ]
                        },
                        {
                            "id": 2,
                            "nombre": "calistenia",
                            "horario":
                                [
                                    {
                                        "dia": "miercoles",
                                        "hora": ["10:00"]
                                    }
                                ]
                        }
                    ]
            }
            
+ Response 500 (application/json)

        {
            "message": "Internal server error"
        }
            
## Update member [PUT/members/{member_id}]
Acutaliza la información de un miembro dado. Se puede actualizar cualquier campo
excepto el id y el DNI. También se actualizan las actividades (se inscribe al
miembro en ella).
+ Parameters
    + member_id: 2 (number) - ID of the member in the form of an integer
    
+ Request (application/json)

        {
            "nombre": "Rosa",
            "apellidos": "Rey Varela",
            "dirección": "Calle Azul Nº50"
            "ciudad": "A Coruña",
            "codigo postal": 15009,
            "email": "rosareyva@gmail.com",
            "telefono": 656438892,
            "actividades": 
                [
                    {
                        "id": 1,
                        "nombre": "crossfit",
                        "horario":
                            [
                                {
                                    "dia": "lunes",
                                    "hora": ["17:30"]
                                }
                            ]
                    }
                ]
        }
        
+ Response 204
    
# Activities Resource [/activity]

Gestiona las actividades del gimnasio, añadiendo, eliminando y actualizando.

## List all activities [GET]

Muestra todas las actividades registradas que ofrece el gimnasio.

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "nombre": "crossfit",
                "horario":
                    [
                        {
                            "dia": "lunes",
                            "hora": ["11:30","17:30"]
                        },
                        {
                            "dia": "jueves",
                            "hora": ["10:00","17:30"]
                        }
                    ]
            },
            {
                "id": 2,
                "nombre": "calistenia",
                "horario":
                    [
                        {
                            "dia": "miercoles",
                            "hora": ["10:00","19:00"]
                        },
                        {
                            "dia": "viernes",
                            "hora": ["17:00"]
                        }
                    ]
            },
            {
                "id": 3,
                "nombre": "zumba",
                "horario":
                    [
                        {
                            "dia": "lunes",
                            "hora": ["10:30","20:00"]
                        },
                        {
                            "dia": "miercoles",
                            "hora": ["10:30","20:00"]
                        },
                        {
                            "dia": "viernes",
                            "hora": ["10:30","20:00"]
                        }
                    ]
            }
        ]
        
+ Response 500 (application/json)

        {
            "message": "Internal server error"
        }
        
## Inscribe new activity [POST]

Crea una nueva actividad.

- **nombre:** Nombre de la actividad.
- **horario:** Dias en las que se imparte y horas. Pueden ser varios dias y varias
horas por dia.

+ Request (application/json)

        {
            "nombre": "aerobic",
            "horario":
                [
                    {
                        "dia": "martes",
                        "hora": ["9:00","20:00"]
                    },
                    {
                        "dia": "jueves",
                        "hora": ["9:00","20:00"]
                    }
                ]
        }

+ Response 201 (application/json)

        {
            "id": 4,
            "nombre": "aerobic",
            "horario":
                [
                    {
                        "dia": "martes",
                        "hora": ["9:00","20:00"]
                    },
                    {
                        "dia": "jueves",
                        "hora": ["9:00","20:00"]
                    }
                ]
        }
        
+ Response 500 (application/json)

        {
            "message": "Internal server error"
        }

# Workers Resource [/worker]
Gestiona los trabajadores del gimnasio.

## Get worker [GET/worker/{worker_id}]
Muestra la información del trabajador con el id dado.
+ Parameters
    + worker_id: 1 (number) - ID of the worker in the form of an integer
    
+ Response 200 (application/json)

        {
            "id": 1,
            "nombre": "Tania",
            "apellidos": "Iglesias Díaz",
            "nss": "97586031246",
            "direccion": "Calle Honduras Nº15",
            "ciudad": "A Coruña",
            "codigo postal": 15008,
            "telefono": 676896124,
            "email": "tania.iglesiasd@gmail.com",
            "tipo": "Monitor",
            "sueldo": "1250 euros"
        }
        
+ Response 400 (application/json)

        {
            "message": "Invalid argument"
        }
        
+ Response 404 (application/json)

        {
            "message": "Resource not found"
        }
        
+ Response 500 (application/json)

        {
            "message": "Internal server error"
        }
    

## Sign up a new worker [POST]

Da de alta a un nuevo trabajador.
Se debe proporcionar:

- **Nombre:** Nombre del trabajador.
- **Apellidos:** Apellidos del trabajador.
- **NSS:** Número de seguridad social.
- **Dirección:** Se divide en tres campos: calle, ciudad y código postal.
- **Contacto:** Número de teléfono y email.
- **Tipo:** Tipo de trabajo a realizar (P. ej.: limpiador, monitor, recepcionista, etc.).
- **Sueldo:** Sueldo mensual a recibir.

+ Request (application/json)

        {
            "nombre": "Juan",
            "apellidos": "Fraga Espinosa",
            "nss": "03526172489",
            "direccion": "Calle Chile Nº114",
            "ciudad": "A Coruña",
            "codigo postal": 15009,
            "telefono": 655342218,
            "email": "juan.fespinosa@gmail.com",
            "tipo": "Recepcionista",
            "sueldo": "1150 euros"
        }

+ Response 201 (application/json)

    + Headers
    
            Location: /worker/1
            
    + Body
        
            {
                "id": 2,
                "nombre": "Juan",
                "apellidos": "Fraga Espinosa",
                "nss": "03526172489",
                "direccion": "Calle Chile Nº114",
                "ciudad": "A Coruña",
                "codigo postal": 15009,
                "telefono": 655342218,
                "email": "juan.fespinosa@gmail.com",
                "tipo": "Recepcionista",
                "sueldo": "1150 euros"
            }

+ Response 500 (application/json)

        {
            "message": "Internal server error"
        }
        
# Material Resource [/material]
Gestiona las compras de material deportivo realizadas por el gimnasio.

## Record new material purchase [POST]

Registra una compra de material. Se pueden comprar varios productos en una misma compra.
Se debe proporcionar la siguiente información sobre cada producto comprado:

- **Nombre** del producto.
- **Cantidad** solicitada de material.
- **Precio** por unidad en euros.

Sobre la compra total se proporciona la siguiente información:
- **Precio total** de la compra en euros.

+ Request (application/json)

        {
            "material":
                [
                    {
                        "nombre": "elasticos",
                        "cantidad": 5,
                        "precio unidad": 12
                    },
                    {
                        "nombre": "disco 5Kg",
                        "cantidad": 10,
                        "precio unidad": 15
                    },
                    {
                        "nombre": "banco reclinable",
                        "cantidad": 2,
                        "precio unidad": 45
                    }
                ],
            "precio total": 300
        }
        
+ Response 201 (application/json)

    + Headers
    
            Location: /material/1
            
    + Body
    
            {
                "id": 1,
                "material":
                    [
                        {
                            "nombre": "elasticos",
                            "cantidad": 5,
                            "precio unidad": 12
                        },
                        {
                            "nombre": "disco 5Kg",
                            "cantidad": 10,
                            "precio unidad": 15
                        },
                        {
                            "nombre": "banco reclinable",
                            "cantidad": 2,
                            "precio unidad": 45
                        }
                    ],
                "precio total": 300
            }
        
+ Response 500 (application/json)

        {
            "message": "Internal server error"
        }